{"version":3,"sources":["components/layout/Header.js","components/FullMoonCalc.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","Header","style","FullMoonCalc","state","age","onChange","e","setState","target","name","value","onSubmit","preventDefault","props","fullMoonCalc","display","justifyContent","marginBottom","maxWidth","this","type","flex","placeholder","className","Component","App","fullMoonYears","console","log","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAUA,IAAMA,EAAY,CACdC,WAAY,OACZC,MAAO,OACPC,UAAW,SACXC,QAAS,QAGEC,EAfd,WACG,OACI,4BAAQC,MAAON,GACX,4D,OCsCGO,EAxCf,2MAEIC,MAAM,CACFC,IAAI,IAHZ,EAMIC,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAN/D,EAQIC,SAAU,SAACL,GACXA,EAAEM,iBACF,EAAKC,MAAMC,aAAa,EAAKX,MAAMC,MAVvC,wEAeQ,OACI,yBAAKH,MAAO,CAACc,QAAQ,OAAOC,eAAe,WACvC,0BAAMf,MAAO,CAACc,QAAQ,OAAQE,aAAc,OAAQC,SAAU,OAASP,SAAUQ,KAAKR,UAClF,2BACIS,KAAK,SACLX,KAAK,MACLR,MAAO,CAACoB,KAAK,KAAKtB,QAAQ,QAC1BuB,YAAY,qBACZjB,SAAYc,KAAKd,WAGrB,2BACIe,KAAK,SACLV,MAAM,SACNa,UAAU,MACVtB,MAAO,CAACoB,KAAK,aA9BrC,GAAkCG,aC0CnBC,G,iNAnCbtB,MAAM,CACJuB,cAAe,G,EAIjBZ,aAAc,SAACV,GACbuB,QAAQC,IAAIxB,GAEZ,EAAKG,SAAS,CAACmB,cAAmB,GAAJtB,K,wEAK9B,OACE,yBAAKmB,UAAU,aAEb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,gBACf,yBAAKM,IAAK,gDAAiDC,IAAI,UAG/D,kBAAC,EAAD,CAAchB,aAAcK,KAAKL,eAEjC,yBAAKS,UAAU,UACb,mDAAyBJ,KAAKhB,MAAMuB,gBAEtC,6BACA,yD,GA/BUF,cCKEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1f5b4131.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>How Full Moon Old Are You?</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle={\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\n\r\n\r\nexport class FullMoonCalc extends Component {\r\n\r\n    state={\r\n        age:''\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value})\r\n\r\n    onSubmit =(e) => {\r\n    e.preventDefault();\r\n    this.props.fullMoonCalc(this.state.age);\r\n    \r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display:'flex',justifyContent:'center'}}>\r\n                <form style={{display:'flex', marginBottom: '25px', maxWidth: '60%',}} onSubmit={this.onSubmit}>\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"age\"\r\n                        style={{flex:'10',padding:'10px'}}\r\n                        placeholder=\"Insert your age...\"\r\n                        onChange = {this.onChange}\r\n                    >\r\n                    </input>\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Submit\"\r\n                        className=\"btn\"\r\n                        style={{flex:'1'}}\r\n                    >\r\n                    </input>\r\n                    </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FullMoonCalc\r\n","import React, { Component } from 'react';\nimport Header from './components/layout/Header';\nimport FullMoonCalc from './components/FullMoonCalc';\nimport './App.css'\n\n\n\nclass App extends Component {\n\n  // Default full moon age\n  state={\n    fullMoonYears: 1\n  }\n\n  // calculating users full moon age by multiplying by 12\n  fullMoonCalc =(age) => {\n    console.log(age);\n\n    this.setState({fullMoonYears: age*12});\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {/* Header */}\n        <Header />\n        {/* Moon image */}\n        <div className=\"picContainer\">\n        <img src={'http://pngimg.com/uploads/moon/moon_PNG52.png'} alt=\"moon\"></img>\n        </div>\n        {/* the age input */}\n        <FullMoonCalc fullMoonCalc={this.fullMoonCalc}/>\n        {/* The result */}\n        <div className=\"result\">\n          <h2>Age in full moons:  {this.state.fullMoonYears}</h2>\n        </div>\n        <br/>\n        <p>&copy; Martin Gras 2019</p>\n      </div>\n\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}